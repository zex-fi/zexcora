[tool.poetry]
name = "app"
version = "0.1.0"
description = ""
authors = []

[tool.poetry.dependencies]
python = ">=3.12,<4"
secp256k1 = "^0.14.0"
fastapi = "^0.111.0"
pydantic = ">2.0"
requests = { extras = ["socks"], version = "^2.32.3" }
httpx = { extras = ["socks"], version = "^0.28.0" }
websockets = "^12.0"
websocket-client = "^1.8.0"
pandas = "^2.2.2"
eth-hash = { extras = ["pycryptodome"], version = "^0.7.0" }
loguru = "^0.7.2"
bitcoinrpc = "^0.7.0"
bitcoin-utils = "0.6.8"
pycryptodomex = "^3.20"
fastecdsa = "^2.3.2"
eth-abi = "^5.1.0"
flask = "^3.0.0"
zellular = { git = "https://github.com/zellular-xyz/zellular.py.git", rev = "main" }
eigensdk = { git = "https://github.com/zellular-xyz/eigensdk-python", rev = "main" }
pyfrost = { git = "https://github.com/zellular-xyz/pyfrost", rev = "main" }
web3 = "^7.4.0"
redis = "^5.1.1"
protobuf = "^5.28.3"
pydantic-settings = "^2.6.1"
python-dotenv = "^1.0.1"
sqlmodel = "^0.0.22"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.2"
ruff = "^0.4.9"
colorama = "^0.4.6"
fakeredis = "^2.25.1"
binance-connector = "^3.10.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py310"
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "E4",
    "E7",
    "E9",
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG001", # unused arguments in functions
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "W191", # indentation contains tabs
    "B904", # Allow raising exceptions without from e, for HTTPException
]
fixable = ["ALL"]
unfixable = ["B"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable reformatting of code snippets in docstrings.
docstring-code-format = true

[tool.ruff.lint.isort]
from-first = true

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true
